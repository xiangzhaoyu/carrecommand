package com.surekam.greenguide.ui.view;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.drawable.BitmapDrawable;
import android.os.AsyncTask;
import android.text.Html;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.surekam.greenguide.R;
import com.surekam.greenguide.tools.StringUtils;

@SuppressLint("NewApi")
public class ViewDevice extends LinearLayout {
	Context _context;
	ImageView _ivLine;
	boolean _isConnect = true;
	boolean _isPhone = true;

	public ViewDevice(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		initView(context);
	}

	public ViewDevice(Context context, AttributeSet attrs) {
		super(context, attrs);
		// TODO Auto-generated constructor stub
		initView(context);
	}

	public void setData(String title, boolean isPhone) {
		_isPhone = isPhone;
		_isConnect = true;
		refreshUI(title);
	}

	public void titleVisible(boolean visible) {
		findViewById(R.id.device_layout_title).setVisibility(
				visible ? View.VISIBLE : View.GONE);
	}

	public void setBackgroundTrans() {
		findViewById(R.id.device_layout).setBackgroundResource(
				R.color.transparent);
	}

	private void initView(Context context) {
		_context = context;

		_progressDialog = new MyProgressDialog(_context);
		inflate(_context, R.layout.list_item_device, this);
		_ivLine = (ImageView) findViewById(R.id.device_iv_line);
	}

	float _startX;
	float _startY;

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		switch (event.getAction() & MotionEvent.ACTION_MASK) {
		case MotionEvent.ACTION_DOWN: // 指点杆按下
			// 将当前的坐标保存为起始点
			_startX = event.getX();
			_startY = event.getY();
			break;
		case MotionEvent.ACTION_MOVE: // 指点杆保持按下，并且进行位移

			break;
		case MotionEvent.ACTION_UP: // 指点杆离开屏幕
			float distance = event.getX() - _startX;
			if (distance > 100 && !_isConnect) {
				connetNet();
			}

			if (distance < -100 && _isConnect) {
				disconnetNet();
			}

			break;
		case MotionEvent.ACTION_POINTER_UP: // 有手指头离开屏幕，但还有没离开的
			break;
		case MotionEvent.ACTION_POINTER_DOWN: // 如果已经有手指压在屏幕上，又有一个手指压在了屏幕上
			break;
		}

		return true;
	}

	private void connetNet() {
		new connectTask().execute("");
	}

	private void disconnetNet() {
		new disconnetTask().execute("");
	}

	MyProgressDialog _progressDialog;

	/**
	 * 访问服务器的线程
	 */
	private class disconnetTask extends AsyncTask<String, Void, String> {

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			_progressDialog.show("正在断开网络...", false);

			super.onPreExecute();
		}

		@Override
		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			_progressDialog.dimiss();
			_isConnect = false;
			refreshUI("");
		}
	}

	private class connectTask extends AsyncTask<String, Void, String> {

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			_progressDialog.show("正在连接网络...", false);

			super.onPreExecute();
		}

		@Override
		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			_progressDialog.dimiss();
			_isConnect = true;
			refreshUI("");
		}
	}

	public void refreshUI(String title) {
		if (!StringUtils.isEmpty(title)) {
			((TextView) findViewById(R.id.device_tv_title)).setText(title);
		}

		String isConnect = _isConnect ? "已连接" : "连接断开";
		((TextView) findViewById(R.id.device_tv_connect_state))
				.setText("连接状态: " + isConnect + "");

		int resId = _isPhone ? (_isConnect ? R.drawable.iphoneup
				: R.drawable.iphonedown) : (_isConnect ? R.drawable.inter_ss_2
				: R.drawable.inter_ss_22);

		ImageView devicePic = (ImageView) findViewById(R.id.device_iv_device_pic);
		devicePic.setImageResource(resId);

		int netResId = _isConnect ? R.drawable.inter_ss_1
				: R.drawable.inter_ss_11;
		((ImageView) findViewById(R.id.device_iv_network))
				.setImageResource(netResId);

		int connectLine = _isConnect ? R.drawable.inter_ss_line
				: R.drawable.disconnect;
		_ivLine.setBackgroundResource(connectLine);

		devicePic.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showPop(v);
			}
		});
	}

	PopupWindow mPopupWindow;
	View mPopView;

	public String getInfoHtml() {
		StringBuilder sb = new StringBuilder();

		sb.append("<font  color=\"#333333\">连接状态  :  </font>");
		sb.append("<font  color=\"#666666\">已连接</font>");
		sb.append("<br>");

		sb.append("<font  color=\"#333333\">本次已连接时长 :  </font>");
		sb.append("<font  color=\"#666666\">3小时</font>");
		sb.append("<br>");

		sb.append("<font  color=\"#333333\">总连接时长 :  </font>");
		sb.append("<font  color=\"#666666\">30小时</font>");
		sb.append("<br>");

		sb.append("<font  color=\"#333333\">当前浏览网站 :  </font>");
		sb.append("<font  color=\"#666666\">baidu.com</font>");
		// sb.append("<br>");

		return sb.toString();
	}

	public void showPop(View v) {
		if (mPopView == null) {
			mPopView = LayoutInflater.from(_context).inflate(
					R.layout.view_pop_text, null);

			/** 初始化PopupWindow */

			mPopupWindow = new PopupWindow(mPopView,
					ViewGroup.LayoutParams.WRAP_CONTENT,
					ViewGroup.LayoutParams.WRAP_CONTENT);
			mPopupWindow.setFocusable(true);// 取得焦点
			mPopupWindow.setBackgroundDrawable(new BitmapDrawable());
			/** 设置PopupWindow弹出和退出时候的动画效果 */
			mPopupWindow.setAnimationStyle(R.style.MyDialogStyleTop);
		}

		TextView tv = (TextView) mPopView.findViewById(R.id.tv_content);
		tv.setText(Html.fromHtml(getInfoHtml()));
		mPopupWindow.showAsDropDown(v, 0, 0);
	}
}
