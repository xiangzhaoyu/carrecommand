package com.surekam.greenguide.ui.fragment;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.entity.StringEntity;
import org.apache.http.protocol.HTTP;

import android.graphics.drawable.BitmapDrawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.SparseIntArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.ViewSwitcher;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseStream;
import com.lidroid.xutils.http.client.HttpRequest;
import com.lidroid.xutils.util.LogUtils;
import com.squareup.otto.Subscribe;
import com.surekam.greenguide.R;
import com.surekam.greenguide.api.HttpExecute;
import com.surekam.greenguide.api.HttpExecute.httpReturn;
import com.surekam.greenguide.api.HttpExecuteJson;
import com.surekam.greenguide.api.HttpExecuteJson.httpReturnJson;
import com.surekam.greenguide.api._FakeX509TrustManager;
import com.surekam.greenguide.app.AppContext;
import com.surekam.greenguide.app.UIHelper;
import com.surekam.greenguide.bean.BlockPeriodList;
import com.surekam.greenguide.bean.PolicieClass;
import com.surekam.greenguide.bean.PolicyPath;
import com.surekam.greenguide.bean.Schedule;
import com.surekam.greenguide.common.BaseFragment;
import com.surekam.greenguide.event.EditTimeRuleEvent;
import com.surekam.greenguide.tools.ACache;
import com.surekam.greenguide.tools.DebugUtil;
import com.surekam.greenguide.tools.MenuUtil;
import com.surekam.greenguide.ui.view.MyProgressDialog;
import com.surekam.greenguide.ui.view.MySurfaceView;
import com.surekam.greenguide.ui.view.MySurfaceView.onValueChanged;

public class FragmentTimeSimpleSet extends BaseFragment {
	MySurfaceView _surfaceView;
	View _layoutEdit;

	ACache _aCache;
	String _saveTag = "timeList";

	SparseIntArray _editTimeSchedule;

	// int _isWorkDay = -1;// -1-工作日 -2-周末 -1具体天数

	Map<Integer, SparseIntArray> _listSchedule = new HashMap<Integer, SparseIntArray>();
	List<PolicieClass> _PolicyData = new ArrayList<PolicieClass>(); // 时间设置的
	List<PolicieClass> _otherPolicyData = new ArrayList<PolicieClass>(); // 其它的设置

	ViewSwitcher _viewSwitcher;

	int _timeId = 21;
	/**
	 * 是否简单设置上学日和休息日
	 */
	Boolean _simpleType = true; // 是否工作日和周末的简单模式
	/**
	 * 是否白天
	 */
	boolean _isDay = true; // 是否白天
	/**
	 * 日期选择 -1 上学日 -2休息日 1-周日 2-6周一到周五 7-周六
	 */
	int _selectDay = -1;// 当前选中日期

	Button _btSave;
	boolean _advanceSaved = false;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		_context = getActivity();
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		_view = inflater.inflate(R.layout.fragment_time_list, null);
		_view.setOnTouchListener(UIHelper.mTouchListner);

		initData();
		initTitle();
		initView();

		return _view;
	}

	private void initTitle() {
		MenuUtil.setMenuBack(getActivity(), _view);
		MenuUtil.setMenuTitle(_view, "上网时段");
		// MenuUtil.setMenuBackTransparent(_view);
		MenuUtil.setMenuMore(getActivity(), _view, true, "推荐设置",
				_advanceListner);
	}

	private void initView() {
		_aCache = ACache.get(_context);

		_layoutEdit = _view.findViewById(R.id.time_layout_edit);

		_view.findViewById(R.id.time_bt_cancel).setOnClickListener(
				_cancelListener);
		_view.findViewById(R.id.time_iv_day_night).setOnClickListener(
				mDayNightListener);
		_view.findViewById(R.id.time_tv_day_night_text).setOnClickListener(
				mDayNightListener);

		_view.findViewById(R.id.time_bt_day_night).setVisibility(View.GONE);

		// _view.findViewById(R.id.time_bt_update).setOnClickListener(
		// _updateListener);

		_btSave = (Button) _view.findViewById(R.id.time_bt_save);
		_btSave.setText("保存");
		_btSave.setOnClickListener(_saveListener);

		initDayHeader();
		// changeSimpleType(true);
		setSimple();
	}

	private void initDayHeader() {
		_viewSwitcher = (ViewSwitcher) _view
				.findViewById(R.id.view_day_switcher);

		ImageView btAdvance = (ImageView) _view
				.findViewById(R.id.view_day_bt_advance);
		btAdvance.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				changeSimpleType(false);
				// _viewSwitcher.showNext();
			}
		});

		ImageView btNormal = (ImageView) _view
				.findViewById(R.id.view_day_bt_normal);
		btNormal.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				changeSimpleType(true);

			}
		});

		_surfaceView = (MySurfaceView) _view
				.findViewById(R.id.time_surface_view);
		_surfaceView.setOnValueChangeed(mValueListner);
		//
		// ((RadioButton) _view.findViewById(R.id.view_day_rb_workday))
		// .setOnCheckedChangeListener(_daySelectListner);
		// ((RadioButton) _view.findViewById(R.id.view_day_rb_weekendday))
		// .setOnCheckedChangeListener(_daySelectListner);
		//
		// ((CheckBox) _view.findViewById(R.id.view_day_week_1))
		// .setOnCheckedChangeListener(_daySelectListner);
		// ((CheckBox) _view.findViewById(R.id.view_day_week_2))
		// .setOnCheckedChangeListener(_daySelectListner);
		// ((CheckBox) _view.findViewById(R.id.view_day_week_3))
		// .setOnCheckedChangeListener(_daySelectListner);
		// ((CheckBox) _view.findViewById(R.id.view_day_week_4))
		// .setOnCheckedChangeListener(_daySelectListner);
		// ((CheckBox) _view.findViewById(R.id.view_day_week_5))
		// .setOnCheckedChangeListener(_daySelectListner);
		// ((CheckBox) _view.findViewById(R.id.view_day_week_6))
		// .setOnCheckedChangeListener(_daySelectListner);
		// ((CheckBox) _view.findViewById(R.id.view_day_week_7))
		// .setOnCheckedChangeListener(_daySelectListner);

		((RadioButton) _view.findViewById(R.id.view_day_rb_workday))
				.setOnClickListener(_dayClicked);
		((RadioButton) _view.findViewById(R.id.view_day_rb_weekendday))
				.setOnClickListener(_dayClicked);

		(_view.findViewById(R.id.view_day_week_1))
				.setOnClickListener(_dayClicked);
		(_view.findViewById(R.id.view_day_week_2))
				.setOnClickListener(_dayClicked);
		(_view.findViewById(R.id.view_day_week_3))
				.setOnClickListener(_dayClicked);
		(_view.findViewById(R.id.view_day_week_4))
				.setOnClickListener(_dayClicked);
		(_view.findViewById(R.id.view_day_week_5))
				.setOnClickListener(_dayClicked);
		(_view.findViewById(R.id.view_day_week_6))
				.setOnClickListener(_dayClicked);
		(_view.findViewById(R.id.view_day_week_7))
				.setOnClickListener(_dayClicked);

	}

	OnClickListener _dayClicked = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			int day = -1;

			switch (arg0.getId()) {
			case R.id.view_day_rb_workday:
				day = -1;
				break;
			case R.id.view_day_rb_weekendday:
				day = -2;
				break;
			case R.id.view_day_week_1:
				day = 2;
				break;
			case R.id.view_day_week_2:
				day = 3;
				break;
			case R.id.view_day_week_3:
				day = 4;
				break;
			case R.id.view_day_week_4:
				day = 5;
				break;
			case R.id.view_day_week_5:
				day = 6;
				break;
			case R.id.view_day_week_6:
				day = 7;
				break;
			case R.id.view_day_week_7:
				day = 1;
				break;

			default:
				break;
			}

			if (_selectDay != day) {
				_selectDay = day;
				refreshView();
			}

		}
	};

	// OnCheckedChangeListener _daySelectListner = new OnCheckedChangeListener()
	// {
	// @Override
	// public void onCheckedChanged(CompoundButton buttonView,
	// boolean isChecked) {
	// // TODO Auto-generated method stub
	// int day = -1;
	//
	// switch (buttonView.getId()) {
	// case R.id.view_day_rb_workday:
	// day = -1;
	// break;
	// case R.id.view_day_rb_weekendday:
	// day = -2;
	// break;
	// case R.id.view_day_week_1:
	// day = 2;
	// break;
	// case R.id.view_day_week_2:
	// day = 3;
	// break;
	// case R.id.view_day_week_3:
	// day = 4;
	// break;
	// case R.id.view_day_week_4:
	// day = 5;
	// break;
	// case R.id.view_day_week_5:
	// day = 6;
	// break;
	// case R.id.view_day_week_6:
	// day = 7;
	// break;
	// case R.id.view_day_week_7:
	// day = 1;
	// break;
	//
	// default:
	// break;
	// }
	//
	// checked(isChecked, day);
	//
	// }
	// };

	private void initData() {

		_editTimeSchedule = new SparseIntArray();
		for (int i = 0; i <= 23; i++) {
			_editTimeSchedule.put(i, 0);
		}

		for (int i = -2; i <= 7; i++) {
			if (i != 0) {
				_listSchedule.put(i, newSchedule());
			}
		}

		// 数据存放在本地
		// String json = getSavedSchedule();
		// if (!StringUtils.isEmpty(json)) {
		// _PolicyData = new Gson().fromJson(json, PolicieClass.class);
		// if (_PolicyData != null) {
		// _listSchedule = PolicyConvert.policyListToMap(_PolicyData
		// .getPeriodList());
		// }
		//
		// _simpleType = true;
		// _isDay = true;
		// showSchedule(-1);
		// } else {
		GetPolicies();
		// }

	}

	public String getSavedSchedule() {
		// _aCache.remove(_saveTag);
		String json = _aCache.getAsString(_saveTag);
		return json;
	}

	onValueChanged mValueListner = new onValueChanged() {
		@Override
		public void onChanged() {
			// TODO Auto-generated method stub
			// if (_layoutEdit.getVisibility() == View.GONE) {
			// _layoutEdit.setVisibility(View.VISIBLE);
			// }

			refreshSaveLayout(true, true);
		}
	};

	// OnClickListener mNewRule = new OnClickListener() {
	//
	// @Override
	// public void onClick(View arg0) {
	// // TODO Auto-generated method stub
	// ((ActivityMain) _context).addFragment(new FragmentTimeSet(),
	// "FragmentTimeSet");
	// }
	// };

	OnClickListener mDayNightListener = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			_isDay = !_isDay;

			refreshView();
		}
	};

	/**
	 * 保存修改存放在_listSchedule
	 */
	OnClickListener _saveListener = new OnClickListener() {
		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			_layoutEdit.setVisibility(View.GONE);
			_editTimeSchedule = _surfaceView.getValue();

			_listSchedule.put(_selectDay, _editTimeSchedule.clone());

			Gson gs = new Gson();
			String saveStr = gs.toJson(_listSchedule);
			// _listSchedule = newList;

			// 可以保存到网络
			// _view.findViewById(R.id.time_bt_update).setVisibility(
			// View.VISIBLE);

			updatePolicy();

			DebugUtil.printDebugTag("save", saveStr);
		}

		// }
	};

	/**
	 * 保存到网络
	 */
	OnClickListener _updateListener = new OnClickListener() {
		@Override
		public void onClick(View arg0) {
			int visible = _btSave.getVisibility();

			if (visible == View.VISIBLE) {
				_btSave.performClick();
			}

			updatePolicy();

		}

	};

	OnClickListener _cancelListener = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			_layoutEdit.setVisibility(View.GONE);
			_surfaceView.setValue(_editTimeSchedule, _isDay);

		}
	};

	@Subscribe
	public void onEditTimeRuleRecived(EditTimeRuleEvent event) {
		if (event != null) {
			// UIHelper.ToastMessage(_context, event.testTitle);
		}

	}

	private void changeSimpleType(final boolean type) {

		if (!type) {
			// if (_simpleType != type)

			if (!_advanceSaved) {
				for (int i = 2; i <= 6; i++) {
					_listSchedule.put(i, _listSchedule.get(-1).clone());
				}

				// 休息日的时间复制给周六周日
				_listSchedule.put(1, _listSchedule.get(-2).clone());
				_listSchedule.put(7, _listSchedule.get(-2).clone());
			}

			_viewSwitcher.showNext();
			setAdvanced();
		} else {

			// if (_simpleType != type)
			_viewSwitcher.showPrevious();

			setSimple();

		}

		LogUtils.d("简单或者高级:" + type + "|" + new Gson().toJson(_listSchedule));

	}

	private void setSimple() {

		_selectDay = -1;
		_isDay = true;
		_simpleType = true;

		((RadioButton) _view.findViewById(R.id.view_day_rb_workday))
				.setChecked(true);
		refreshView();
	}

	private void setAdvanced() {

		_selectDay = 2;
		_isDay = true;
		_simpleType = false;

		((RadioButton) _view.findViewById(R.id.view_day_week_1))
				.setChecked(true);
		refreshView();
	}

	private void changeDayAndNight(final boolean isDay) {
		final ImageView iv = (ImageView) _view
				.findViewById(R.id.time_iv_day_night);
		Animation a = AnimationUtils
				.loadAnimation(_context, R.anim.top_to_down);
		a.setAnimationListener(new AnimationListener() {

			@Override
			public void onAnimationStart(Animation arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onAnimationRepeat(Animation arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onAnimationEnd(Animation arg0) {
				// TODO Auto-generated method stub
				if (isDay) {
					iv.setBackgroundResource(R.drawable.widget_w_0);
				} else {
					iv.setBackgroundResource(R.drawable.widget_w_3);
				}

				Animation b = AnimationUtils.loadAnimation(_context,
						R.anim.down_top);
				iv.startAnimation(b);
			}
		});

		iv.startAnimation(a);

	}

	private void refreshView() {

		SparseIntArray sch = getScheduleByTag(_selectDay);
		_editTimeSchedule = sch.clone();

		// UI处理
		ImageView iv = (ImageView) _view.findViewById(R.id.time_bt_day_night);

		iv.setImageResource(_isDay ? R.drawable.icon_menu_daytime_n
				: R.drawable.icon_menu_night_n);

		TextView tv = (TextView) _view
				.findViewById(R.id.time_tv_day_night_text);
		tv.setText(_isDay ? "上午" : "下午");
		tv.getPaint().setFakeBoldText(true);

		_surfaceView.setValue(_editTimeSchedule, _isDay);
		changeDayAndNight(_isDay);

	}

	private SparseIntArray getScheduleByTag(int type) {
		return _listSchedule.get(type);

	}

	private List<Integer> getCheckList() {
		List<Integer> checkList = new ArrayList<Integer>();

		if (_simpleType) {
			RadioButton rb1 = (RadioButton) _view
					.findViewById(R.id.view_day_rb_workday);

			if (rb1.isChecked()) {
				checkList.add(-1);
			} else {
				checkList.add(-2);
			}

		} else {
			if (((RadioButton) _view.findViewById(R.id.view_day_week_1))
					.isChecked())
				checkList.add(2);

			if (((RadioButton) _view.findViewById(R.id.view_day_week_2))
					.isChecked())
				checkList.add(3);

			if (((RadioButton) _view.findViewById(R.id.view_day_week_3))
					.isChecked())
				checkList.add(4);

			if (((RadioButton) _view.findViewById(R.id.view_day_week_4))
					.isChecked())
				checkList.add(5);

			if (((RadioButton) _view.findViewById(R.id.view_day_week_5))
					.isChecked())
				checkList.add(6);

			if (((RadioButton) _view.findViewById(R.id.view_day_week_6))
					.isChecked())
				checkList.add(7);
			if (((RadioButton) _view.findViewById(R.id.view_day_week_7))
					.isChecked())
				checkList.add(1);

		}

		return checkList;

	}

	OnClickListener _advanceListner = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			showPop(arg0);

			// UIHelper.fragmentTimeAdvanceList(_context, _PolicyData);
		}
	};

	PopupWindow mPopupWindow;
	View mPopView;

	public void showPop(View v) {
		if (mPopView == null) {
			mPopView = LayoutInflater.from(_context).inflate(
					R.layout.view_pop_advance, null);

			mPopView.findViewById(R.id.pop_advance_tv_1).setOnClickListener(
					_popClicked);
			mPopView.findViewById(R.id.pop_advance_tv_2).setOnClickListener(
					_popClicked);
			mPopView.findViewById(R.id.pop_advance_tv_3).setOnClickListener(
					_popClicked);
			mPopView.findViewById(R.id.pop_advance_tv_4).setOnClickListener(
					_popClicked);

			/** 初始化PopupWindow */
			int width = AppContext.getInstance()._screenWidth / 2;

			mPopupWindow = new PopupWindow(mPopView, width,// ViewGroup.LayoutParams.WRAP_CONTENT,
					ViewGroup.LayoutParams.WRAP_CONTENT);
			mPopupWindow.setFocusable(true);// 取得焦点
			mPopupWindow.setBackgroundDrawable(new BitmapDrawable());
			/** 设置PopupWindow弹出和退出时候的动画效果 */
			mPopupWindow.setAnimationStyle(R.style.MyDialogStyleTop);
		}

		// TextView tv = (TextView) mPopView.findViewById(R.id.tv_content);
		// tv.setText(Html.fromHtml(getInfoHtml()));
		mPopupWindow.showAsDropDown(v, 0, 0);
	}

	OnClickListener _popClicked = new OnClickListener() {
		@Override
		public void onClick(View arg0) {
			mPopupWindow.dismiss();

			String type = ((TextView) arg0).getText().toString();
			refreshSche(type);

		}
	};

	// 从网络获取政策
	private void GetPolicies() {

		_FakeX509TrustManager.allowAllSSL();
		HttpExecute<List<PolicieClass>> http = new HttpExecute<List<PolicieClass>>(
				getActivity(), mPoliciesListener);

		http.setType(new TypeToken<List<PolicieClass>>() {
		}.getType());

		String url = "https://greenchina.wedgenetworks.com/ssgmanager/rest/policies/tb";

		// https://greenchina.wedgenetworks.com/ssgmanager/rest/policies/wf/policy/28

		http.get(url, null);

	}

	private httpReturn<List<PolicieClass>> mPoliciesListener = new httpReturn<List<PolicieClass>>() {

		@Override
		public void onSuccess(List<PolicieClass> result) {
			// TODO Auto-generated method stub
			AnalysisData(result);
		}

		@Override
		public void onFailure(int error, String msg) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onCancel() {
			// TODO Auto-generated method stub

		}

	};

	/**
	 * 把政策解析为时间表
	 * 
	 * @param result
	 */
	private void AnalysisData(List<PolicieClass> result) {
		_PolicyData = new ArrayList<PolicieClass>();
		_otherPolicyData = new ArrayList<PolicieClass>();

		// 循环读取政策列表,符合的政策放在_PolicyData,其它的政策的保存在_otherPolicyData;
		for (PolicieClass policie : result) {
			if (policie.getActionType().equals("BLOCK")
					&& policie.getPolicyPath().getSrcAddress()
							.equals("0.0.0.0/0")) {
				_PolicyData.add(policie);
			} else {
				_otherPolicyData.add(policie);
			}
		}

		// 把_PolicyData的里面的阻挡规则转变为24小时时间制
		Map<Integer, SparseIntArray> times = PolicyConvert
				.policiesToMap(_PolicyData);

		if (times != null) {
			_listSchedule.putAll(times);
		}

		LogUtils.d("初始化:" + new Gson().toJson(_listSchedule));

		Boolean simply = true;
		if (times != null && times.size() == 0) {
			simply = true;
		} else if (times.get(-1) != null) {
			simply = true;
		} else {
			simply = false;
		}

		if (simply) {
			setSimple();
		} else {
			_viewSwitcher.showNext();
			setAdvanced();
		}

	}

	private void updatePolicy() {
		if (_PolicyData != null && _PolicyData.size() > 0) {

			_FakeX509TrustManager.allowAllSSL();
			HttpExecuteJson http = new HttpExecuteJson(getActivity(),
					_deleteListner);

			// String url =
			// "https://greenchina.wedgenetworks.com/ssgmanager/rest/policies/tb/policy/";
			// _PolicyData.getId();

			String url = "https://greenchina.wedgenetworks.com/ssgmanager/rest/policies/tb/";

			// _aCache.put(_saveTag, new Gson().toJson(_PolicyData));

			// DebugUtil.printDebugTag("保存字符串", new Gson().toJson(_PolicyData));
			http.setProgressText("正在保存数据...");
			http.delete(url, null);
		} else {
			new myTask().execute();
		}

	}

	private httpReturnJson _deleteListner = new httpReturnJson() {

		@Override
		public void onSuccess(String result) {
			// TODO Auto-generated method stub
			new myTask().execute();
			// UIHelper.ToastMessage(_context, result);
		}

		@Override
		public void onFailure(int error, String msg) {
			// TODO Auto-generated method stub
			// UIHelper.ToastMessage(_context, "删除数据:" + error + "|" + msg);
			new myTask().execute();

		}

		@Override
		public void onCancel() {
			// TODO Auto-generated method stub

		}

	};

	class myTask extends AsyncTask<Void, String, String> {
		MyProgressDialog mProgress;

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			mProgress = new MyProgressDialog(_context);
			mProgress.show("正在保存数据...", false);
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(Void... params) {
			// TODO Auto-generated method stub
			String returnStr = newPolicy();
			return returnStr;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			mProgress.dimiss();

			if (result.length() == 0) {
				// GetPolicies();

				UIHelper.ToastMessage(_context, "保存成功!");
			} else {
				UIHelper.ToastMessage(_context, result);
			}

			super.onPostExecute(result);
		}

	};

	private String newPolicy() {
		String returnSucess = "";

		_FakeX509TrustManager.allowAllSSL();
		HttpUtils http = new HttpUtils();
		http.configCurrentHttpCacheExpiry(0);

		String url = "https://greenchina.wedgenetworks.com/ssgmanager/rest/policies/tb/";

		List<PolicieClass> newPolicyList = new ArrayList<PolicieClass>();

		// 按照模式获取时间列表
		Map<Integer, SparseIntArray> scheduleList = new HashMap<Integer, SparseIntArray>();
		if (_simpleType) {
			scheduleList.put(-1, _listSchedule.get(-1));
			scheduleList.put(-2, _listSchedule.get(-2));
		} else {
			_advanceSaved = true;
			for (int i = 1; i <= 7; i++) {
				scheduleList.put(i, _listSchedule.get(i));
			}
		}

		// 把时间列表转换为block列表
		List<BlockPeriodList> datas = PolicyConvert.MapToPolicy(scheduleList);

		// 新增阻挡政策,一个block变成一条政策
		for (BlockPeriodList data : datas) {
			PolicieClass newPolicy = getNewPolicy();
			newPolicy.setBlockPeriod(data);

			newPolicyList.add(newPolicy);
		}

		// 加入其它的政策
		if (_otherPolicyData != null) {
			newPolicyList.addAll(_otherPolicyData);
		}

		// 循环保存政策
		for (PolicieClass newPolicy : newPolicyList) {
			// 同步保存
			Gson gson = new GsonBuilder().serializeNulls().create();
			String json = gson.toJson(newPolicy);
			DebugUtil.printDebugTag("保存字符串", json);

			RequestParams params = new RequestParams();
			params.addHeader("Content-Type", "application/json");
			try {
				params.setBodyEntity(new StringEntity(json, HTTP.UTF_8));

				ResponseStream stream = http.sendSync(
						HttpRequest.HttpMethod.POST, url, params);
				if (stream.getStatusCode() == 200
						|| stream.getStatusCode() == 201) {

					returnSucess = "";
				} else {
					returnSucess = "保存失败,返回错误:" + stream.getReasonPhrase();
				}

			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				returnSucess = "保存失败,转化失败!" + e.getMessage();
				e.printStackTrace();
				break;
			} catch (HttpException e) {
				// TODO Auto-generated catch block
				returnSucess = "保存失败!" + e.getMessage();
				e.printStackTrace();
				break;
			}

		}

		if (returnSucess.length() == 0) {
			_PolicyData = newPolicyList;
		}
		return returnSucess;
	}

	// 创建新的政策
	private PolicieClass getNewPolicy() {
		PolicieClass newPolicy = new PolicieClass();

		newPolicy.setExcludeType("NONE");

		newPolicy.setServiceType("TB");
		newPolicy.setActionType("BLOCK");

		PolicyPath path = new PolicyPath();
		path.setSrcAddress("0.0.0.0/0");
		path.setSrcName(null);
		path.setSrcIsGroup(false);
		path.setDstAddress("0.0.0.0/0");
		newPolicy.setPolicyPath(path);

		// _PolicyData.setProtocolList(new String[] { "ALL" });
		newPolicy.setPeriod(null);

		newPolicy.setScanRequest(false);
		newPolicy.setScanResponse(false);
		newPolicy.setProtocolList(new String[] { "ALL" });

		return newPolicy;
	}

	// 获取推荐设置,并且刷新设置
	private void refreshSche(String settingStr) {
		Map<Integer, SparseIntArray> sches = fakeLimitList(settingStr);

		if (sches != null) {
			_listSchedule = sches;
			// 刷新界面
			refreshView();
			// 能够保存
			refreshSaveLayout(true, false);
		}

	}

	// 获取推荐设置
	private Map<Integer, SparseIntArray> fakeLimitList(String settingStr) {
		Map<Integer, SparseIntArray> sches = new HashMap<Integer, SparseIntArray>();
		// 可以根据 _simpleType 判断是否简单模式
		if (_simpleType) {
			if (settingStr.equals("小学")) {
				sches.put(-1, getNotInNet(18));
				sches.put(-2, getNotInNet(18, 19));
				// _isDay = false;

			} else if (settingStr.equals("初中")) {
				sches.put(-1, getNotInNet(18, 19));
				sches.put(-2, getNotInNet(10, 18, 19, 20));
			} else if (settingStr.equals("高中")) {
				sches.put(-1, getNotInNet(18, 19, 20));
				sches.put(-2, getNotInNet(10, 11, 18, 19, 20, 21));
				// _isDay = true;
			} else {
				sches.put(-1, newSchedule());
				sches.put(-2, newSchedule());
			}
		} else {
			if (settingStr.equals("小学")) {
				for (int i = 2; i <= 6; i++) {
					sches.put(i, getNotInNet(18));
				}
				sches.put(1, getNotInNet(18, 19));
				sches.put(7, getNotInNet(18, 19));

			} else if (settingStr.equals("初中")) {
				for (int i = 2; i <= 6; i++) {
					sches.put(i, getNotInNet(18, 19));
				}
				sches.put(1, getNotInNet(10, 18, 19, 20));
				sches.put(7, getNotInNet(10, 18, 19, 20));

			} else if (settingStr.equals("高中")) {
				for (int i = 2; i <= 6; i++) {
					sches.put(i, getNotInNet(18, 19, 20));
				}
				sches.put(1, getNotInNet(10, 11, 18, 19, 20, 21));
				sches.put(7, getNotInNet(10, 11, 18, 19, 20, 21));
			} else {
				for (int i = 1; i <= 7; i++) {
					sches.put(i, newSchedule());
				}

			}
		}

		return sches;
	}

	// 创建时间表.并且根据可上网的小时返回时间表
	private SparseIntArray getNotInNet(int... hour) {
		SparseIntArray daySchedule = new SparseIntArray();

		for (int i = 0; i <= 23; i++) {
			daySchedule.put(i, 0);
		}

		for (int i : hour) {
			daySchedule.put(i, 1);
		}

		return daySchedule;
	}

	private void refreshSaveLayout(boolean btSave, boolean btCancel) {
		_layoutEdit.setVisibility(View.VISIBLE);
		_btSave.setVisibility(btSave ? View.VISIBLE : View.INVISIBLE);
		_view.findViewById(R.id.time_bt_cancel).setVisibility(
				btCancel ? View.VISIBLE : View.INVISIBLE);

	}

	private SparseIntArray newSchedule() {

		// TODO Auto-generated constructor stub
		SparseIntArray daySchedule = new SparseIntArray();
		for (int i = 0; i <= 23; i++) {
			daySchedule.put(i, 1);
		}

		return daySchedule;
	}

}
